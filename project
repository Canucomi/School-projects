using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Player : MovingObject {


	public Sprite backSprite;
	public Sprite inFrontSprite;
	public Sprite literralySprite; 
	public AnimationClip MovingLiterally;
	public AnimationClip MovingDown;
	public AnimationClip MovingUp;

	private int healthPoints;
	private float animLength;
	private bool animationEnded;
	private int xScale;
	private bool faceRight;
	private Animator animator;
	private SpriteRenderer spriteRenderer;

	protected override void Start () {

		animator = GetComponent<Animator> ();
		animationEnded = true;
		spriteRenderer = GetComponent<SpriteRenderer> ();
		faceRight = true;
		xScale = 1;


		base.Start ();

	}


	void Update () {
		if (!GameManager.instance.PlayersTurn) {
			return;
		}
		int horizontal = 0;				//переменные в которых будем хранить данные
		int vertical = 0;

		horizontal = (int) (Input.GetAxisRaw ("Horizontal"));			//получаем ввод с клавиатуры
		vertical = (int) (Input.GetAxisRaw ("Vertical"));




		if (horizontal != 0) {			//что бы не двигаться по диагонали нужно сделать это
			
			vertical = 0;
			 
		}

		if (horizontal != 0 || vertical != 0) {
		    if (animationEnded) {
				StartCoroutine(changeSpriteAndPlayAnimation (horizontal, vertical));
			GameManager.instance.PlayersTurn = false;			//позже реализую пошаговую стратегию(после добавления врагов)
			AttemptMove<Wall> (horizontal, vertical);	//если движение было совершено вызываем функцию и добавляем параметр wall с xDir & yDir
		}
    }

 }

	protected override void AttemptMove<T> (int xDir, int yDir) {		
		
		base.AttemptMove <T> (xDir, yDir);			//переписываем базовую функцию из класса MovingObject

		RaycastHit2D hit;

	}

	protected override void OnCantMove<T> (T Component)  {
		GameManager.instance.PlayersTurn = true;
		return;
	}

	protected IEnumerator changeSpriteAndPlayAnimation(int horizontal, int vertical) {

		if (horizontal < 0) {							//если игрок идет влево
			if (faceRight) {										//если лицо не направлено вправо
				transform.localScale = new Vector3 (xScale * -1, 1, 1);			//меняем x Scale что бы модель была повернута вправо
				faceRight = !faceRight;													//меняем переменную на обратную, что бы сказать что лицо было повернуто
			}
			animationEnded = false;
			animator.SetTrigger("MovingLiterally");
			animLength = MovingLiterally.length;
			yield return new WaitForSeconds (animLength);
			animationEnded = true;
			spriteRenderer.sprite = literralySprite; 			//меняем спрайт
		}

		if (horizontal > 0) {
			if (!faceRight) {
				transform.localScale = new Vector3 (xScale, 1, 1);	
				faceRight = !faceRight;
			}
			animationEnded = false;
			animator.SetTrigger ("MovingLiterally");
			animLength = MovingLiterally.length;
			yield return new WaitForSeconds (animLength);
			animationEnded = true;
			spriteRenderer.sprite = literralySprite; 
		}

		if (vertical > 0) {
			animationEnded = false;
			animator.SetTrigger("MovingUp");
			animLength = MovingUp.length;
			yield return new WaitForSeconds (animLength);
			animationEnded = true;
			spriteRenderer.sprite = backSprite;
			}

		if (vertical < 0) {
			animationEnded = false;
			animator.SetTrigger("MovingDown");
			animLength = MovingDown.length;
			yield return new WaitForSeconds (animLength);
			animationEnded = true;
			spriteRenderer.sprite = inFrontSprite; 
		}

    }
	//функция потери здоровья
	public void LoseHP (int loss)	
	{
		//проигрываем анимацию
		animator.SetTrigger ("playerHit");

		//уменьшаем количество здоровья
		healthPoints -= loss;

		//проверяем продолжать ли игру после потери здоровья
		CheckIfGameOver ();
	}


	//проверяет есть ли у героя здоровья что бы продолжить игру
	private void CheckIfGameOver ()
	{
		//если здоровье меньше или равно нулю
		if (healthPoints <= 0) 
		{

			//вызываем функцию из менеджера и завершаем игру
			GameManager.instance.GameOver ();
		}
		

}
